{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNip+N9bnXOxZjY23n9naNw",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/kessingtonosazee/GCP_Project_1/blob/master/Reasoning\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "r_fBzU22Mkyd",
        "outputId": "6201c066-81cb-441d-e33f-53560635a8dd"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-0a919bd74ee4>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mcode\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mch02\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpy\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'code' is not defined"
          ]
        }
      ],
      "source": [
        "import itertools\n",
        "import networkx as nx\n",
        "import numpy as np\n",
        "\n",
        "from functools import reduce\n",
        "\n",
        "\n",
        "class Variable():\n",
        "    \"\"\"\n",
        "    A variable is given a name (represented as a string) and may take on an integer from 0 to r - 1\n",
        "    \"\"\"\n",
        "    def __init__(self, name: str, r: int):\n",
        "        self.name = name\n",
        "        self.r = r  # number of possible values\n",
        "\n",
        "    def __str__(self):\n",
        "        return \"(\" + self.name + \", \" + str(self.r) + \")\"\n",
        "\n",
        "\n",
        "class Assignment(dict[str, int]):\n",
        "    \"\"\"\n",
        "    Assignment: A mapping from variable names (str) to integer values (int)\n",
        "    \"\"\"\n",
        "    def select(self, varnames: list[str]) -> 'Assignment':\n",
        "        \"\"\"Returns a subset of an assignment, specified by a list of variable names, `varnames`\"\"\"\n",
        "        return Assignment({n: dict.__getitem__(self, n) for n in varnames})\n",
        "\n",
        "    def __hash__(self) -> int:\n",
        "        return hash(tuple(sorted(self.items())))\n",
        "\n",
        "    def copy(self) -> 'Assignment':\n",
        "        result = Assignment()\n",
        "        result.update(self)\n",
        "        return result\n",
        "\n",
        "\n",
        "class FactorTable(dict[Assignment, float]):\n",
        "    \"\"\"\n",
        "    FactorTable: A mapping from assignments (Assignment) to values (float)\n",
        "    Any assignments not contained in the dictionary are set to default_val (typically, 0)\n",
        "    \"\"\"\n",
        "    def get(self, key: Assignment, default_val: float):\n",
        "        return dict.__getitem__(self, key) if key in self.keys() else default_val\n",
        "\n",
        "    def __str__(self) -> str:\n",
        "        table_str = \"\"\n",
        "        for key in self.keys():\n",
        "            table_str += str(key) + \": \" + str(dict.__getitem__(self, key)) + \"\\n\"\n",
        "        table_str = table_str[:-1]\n",
        "        return table_str\n",
        "\n",
        "\n",
        "class Factor():\n",
        "    \"\"\"\n",
        "    A factor is defined by a factor table, which assigns values to different assignments\n",
        "    involving a set of variables and is a mapping from assignments to real values.\n",
        "    \"\"\"\n",
        "    def __init__(self, variables: list[Variable], table: FactorTable):\n",
        "        self.variables = variables\n",
        "        self.table = table\n",
        "        self.variable_names = [var.name for var in variables]\n",
        "\n",
        "    def __str__(self) -> str:\n",
        "        factor_str = \"Variables: \"\n",
        "        factor_str += str([str(var) for var in self.variables])\n",
        "        factor_str += '\\n'\n",
        "        factor_str += str(self.table)\n",
        "        return factor_str\n",
        "\n",
        "    def normalize(self):\n",
        "        \"\"\"Normalizes the factor table\"\"\"\n",
        "        z = np.sum([self.table[a] for a in self.table])\n",
        "        for a, p in self.table.items():\n",
        "            self.table[a] = p/z\n",
        "\n",
        "    def __mul__(self, other: 'Factor') -> 'Factor':\n",
        "        \"\"\" (From Chapter 3)\n",
        "        An implementation of the factor product, which constructs the factor representing\n",
        "        the joint distribution of two smaller factors `phi1` and `phi2`.\n",
        "        If we want to compute the factor product of `phi1` and `phi2`, we simply write `phi1 * phi2`.\n",
        "        \"\"\"\n",
        "        other_only = list(set(other.variables) - set(self.variables))\n",
        "        table = FactorTable()\n",
        "        for self_a, self_p in self.table.items():\n",
        "            for a in assignments(other_only):\n",
        "                a = Assignment(self_a | a)\n",
        "                other_a = a.select(other.variable_names)\n",
        "                table[a] = self_p * other.table.get(other_a, default_val=0.0)\n",
        "        variables = self.variables + other_only\n",
        "        return Factor(variables, table)\n",
        "\n",
        "    def in_scope(self, name: str) -> bool:\n",
        "        \"\"\" (From Chapter 3)\n",
        "        Returns true if the variable named `name` is within the scope of the factor\n",
        "        \"\"\"\n",
        "        return any([name == var.name for var in self.variables])\n",
        "\n",
        "    def sample(self) -> Assignment:\n",
        "        \"\"\" (From Chapter 3)\n",
        "        A method for sampling an assignment from a factor\n",
        "        \"\"\"\n",
        "        total, p, w = 0.0, np.random.rand(), sum(self.table.values())\n",
        "        for a, v in self.table.items():\n",
        "            total += v/w\n",
        "            if total >= p:\n",
        "                return a\n",
        "        return Assignment()\n",
        "\n",
        "    @staticmethod\n",
        "    def prod(factors: list['Factor']) -> 'Factor':\n",
        "        \"\"\"\n",
        "        An extension of factor table multiplication to compute the product of a list of factors.\n",
        "        Used in Chapter 3 Discrete Inference Methods.\n",
        "        \"\"\"\n",
        "        return reduce(lambda phi_1, phi_2: phi_1 * phi_2, factors)\n",
        "\n",
        "\n",
        "def assignments(variables: list[Variable]) -> list[Assignment]:\n",
        "    \"\"\"\n",
        "    Utility function for enumerating all possible assignments for a list of variables\n",
        "    Note: itertools.product produces the Cartesian product of a set of collections\n",
        "    \"\"\"\n",
        "    names = [var.name for var in variables]\n",
        "    return [Assignment(zip(names, values)) for values in itertools.product(*[[i for i in range(var.r)] for var in variables])]\n",
        "\n",
        "\n",
        "# Note: Although `marginalize`, `condition_single`, and `condition_multiple` are\n",
        "# all defined in Chapter 3, the `BayesianNetwork.sample()` function depends on `condition_multiple`.\n",
        "# To import `condition_multiple` would create a circular import issue. Thus, these functions are included\n",
        "# in the ch02 code module, but can still be displayed in Chapter 3 of the textbook.\n",
        "\n",
        "\n",
        "def marginalize(phi: Factor, name: str) -> Factor:\n",
        "    \"\"\" (From Chapter 3)\n",
        "    A method for marginalizing a variable named `name` from a factor `phi`\n",
        "    \"\"\"\n",
        "    table = FactorTable()\n",
        "    for a, p in phi.table.items():\n",
        "        a_prime = a.copy()\n",
        "        del a_prime[name]\n",
        "        table[a_prime] = table.get(a_prime, default_val=0.0) + p\n",
        "    variables = [var for var in phi.variables if var.name is not name]\n",
        "    return Factor(variables, table)\n",
        "\n",
        "\n",
        "def condition_single(phi: Factor, name: str, value: int) -> Factor:\n",
        "    \"\"\" (From Chapter 3)\n",
        "    A method for factor conditioning given some evidence; this method takes a factor `phi` and\n",
        "    returns a new factor whose table entries are consistent with the variable named `name` having the value `value`\n",
        "    \"\"\"\n",
        "    if not phi.in_scope(name):\n",
        "        return phi\n",
        "    table = FactorTable()\n",
        "    for a, p in phi.table.items():\n",
        "        if a[name] == value:\n",
        "            a_prime = a.copy()\n",
        "            del a_prime[name]\n",
        "            table[a_prime] = p\n",
        "    variables = [var for var in phi.variables if var.name is not name]\n",
        "    return Factor(variables, table)\n",
        "\n",
        "\n",
        "def condition_multiple(phi: Factor, evidence: Assignment) -> Factor:\n",
        "    \"\"\" (From Chapter 3)\n",
        "    A method for factor conditioning given some evidence; this method takes a factor `phi`\n",
        "    and applies evidence in the form of a named tuple.\n",
        "    \"\"\"\n",
        "    for name, value in evidence.items():\n",
        "        phi = condition_single(phi, name, value)\n",
        "    return phi\n",
        "\n",
        "\n",
        "class BayesianNetwork():\n",
        "    \"\"\"\n",
        "    A discrete Bayesian network representation in terms of a set of variables, factors, and a graph.\n",
        "    The graph data structure is provided by `networkx`.\n",
        "    \"\"\"\n",
        "    def __init__(self, variables: list[Variable], factors: list[Factor], graph: nx.DiGraph):\n",
        "        self.variables = variables\n",
        "        self.factors = factors\n",
        "        self.graph = graph\n",
        "\n",
        "    def probability(self, assignment: Assignment) -> float:\n",
        "        \"\"\"A function for evaluating the probability of an assignment given the Bayesian network (self).\"\"\"\n",
        "        def subassignment(phi): return assignment.select(phi.variable_names)\n",
        "        def prob(phi): return phi.table.get(subassignment(phi), default_val=0.0)\n",
        "        return np.prod([prob(phi) for phi in self.factors])\n",
        "\n",
        "    def sample(self) -> Assignment:\n",
        "        \"\"\" (From Chapter 3)\n",
        "        A method for sampling an assignment from a Bayesian network\n",
        "        \"\"\"\n",
        "        a = Assignment()\n",
        "        for i in list(nx.topological_sort(self.graph)):\n",
        "            name, phi = self.variables[i].name, self.factors[i]\n",
        "            a[name] = (condition_multiple(phi, a).sample())[name]\n",
        "        return a"
      ]
    }
  ]
}